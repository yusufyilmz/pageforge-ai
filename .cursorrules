# PageForge Project Context

## Project Overview
PageForge is a Next.js-based page/website generation system that creates various types of pages (About, Blog, Gallery, Work, etc.) with different sections and structured content, metadata, and SEO optimization.

## Recently Completed: Type System Refactoring
We just completed a major refactoring of the type system to break down monolithic interfaces into smaller, focused types.

## Key Architecture


### UI Component Structure
- **`@pageforge/once-ui/components`** - Core UI components from Once UI design system
- **`src/components/`** - All section components and page components
  - Section components for content blocks (hero, features, experience, etc.)
  - Page-level components and layouts
  - Custom UI components built on top of Once UI

### Available Section Components (`src/components/sections/`)
PageForge includes 40+ pre-built section components for creating comprehensive pages:

#### Core Content Sections
- **HeroSection** - Landing page hero with title, subtitle, description, buttons, and optional background
- **FeaturesSection** - Feature showcase with grid/list layouts, icons, images, and descriptions
- **AboutSection** - Company/personal about section with rich content formatting
- **TextSection** - Simple text content with typography controls
- **HeadingSection** - Standalone headings with various hierarchy levels

#### Professional & Portfolio Sections
- **ProjectsSection** - Project showcase with images, technologies, links, and descriptions
- **WorkExperienceSection** (ExperienceSection) - Career timeline with companies, roles, and achievements
- **TechnicalSkillsSection** - Skills display with categories, proficiency levels, and icons
- **StudiesSection** - Education background with institutions, degrees, and dates
- **ProfileSection** - Personal profile with avatar, bio, and contact information
- **TimelineSection** - Chronological events display with dates and descriptions
- **AwardsSection** - Achievement and recognition showcase

#### Business & Service Sections
- **PricingSection** - Pricing plans with features, tiers, and call-to-action buttons
- **TestimonialsSection** - Customer reviews with ratings, avatars, and author information
- **ClientsSection** - Client logos and partnership display
- **TeamSection** - Team member profiles with photos and roles
- **CareersSection** - Job listings with descriptions and application links
- **PlansSection** - Service plans with detailed feature comparisons

#### Interactive & Engagement Sections
- **ContactFormSection** - Customizable contact forms with various field types
- **ContactInfoSection** - Contact details with maps, addresses, and social links
- **NewsletterSection** - Email subscription forms with customizable styling
- **CalendarLinkSection** - Meeting scheduling integration
- **MapSection** - Interactive maps with location markers
- **CTASection** - Call-to-action banners with prominent buttons

#### Content & Media Sections
- **BlogPageSection** - Blog post content with typography and media
- **PostsGridSection** - Blog post listings with previews and pagination
- **GalleryGridSection** - Image galleries with masonry/grid layouts
- **VideoSection** - Video embeds with descriptions and controls
- **ShowcaseSection** - Feature showcases with rich media and descriptions
- **QuickstartSection** - Getting started guides with step-by-step instructions

#### Navigation & Information Sections
- **TableOfContentsSection** - Page navigation with auto-generated links
- **TabsSection** - Tabbed content organization
- **AccordionSection** - Collapsible content sections
- **FAQSection** - Frequently asked questions with expandable answers
- **MenuSection** - Navigation menus with hierarchical structure
- **StatsSection** - Key metrics and statistics display

#### Specialized Sections
- **ShopItemsSection** - E-commerce product listings with prices and details
- **PropertySection** - Real estate listings with specifications
- **SocialLinksSection** - Social media profiles and links
- **LegalTextSection** - Terms, privacy policies, and legal content
- **HowToSection** - Tutorial and instructional content
- **AboutHeroSection** - Specialized hero section for about pages

#### Universal Section Features
All sections follow consistent patterns:
- **TypeScript interfaces** for content structure and props
- **Display control** via `block.display` boolean
- **Custom styling** through `block.className`
- **Responsive design** with mobile-first approach
- **Once UI integration** for consistent styling
- **Content validation** with proper TypeScript typing
- **Accessibility features** built-in (ARIA labels, keyboard navigation)
- **SEO optimization** with semantic HTML structure

### Type System (`src/lib/types/page/pageTypes.ts`)
- **PageConfig** - Main page configuration interface
- **PageMetadataConfig** - Nested metadata structure:
  - `basic: PageMetadata` - title, description, keywords
  - `openGraph: OpenGraphMetadata` - OG properties
  - `twitter: TwitterMetadata` - Twitter card properties
- **ContentBlock** - Discriminated union for 30+ section types
- **Enums**: PageType, SchemaType, OpenGraphType

### Theme System
#### Theme Types (`src/lib/types/site/`)
- **SiteThemeType** - Available theme variants:
  ```typescript
  'minimal' | 'bold' | 'dark' | 'playful' | 'elegant' | 'classic' |
  'futuristic' | 'natural' | 'luxury' | 'vintage' | 'creative'
  ```
- **ThemeConfig** - Complete theme configuration with:
  - `font: { primary, secondary, tertiary, code }` - Font definitions
  - `style: { theme, neutral, brand, accent, solid, border, surface, transition, scaling }`
  - `effects: { mask, gradient, dots, lines, grid }` - Visual effects

#### Theme Configuration (`src/lib/types/site/themeConfigs.ts`)
- Predefined theme configurations for all 11 theme types
- Font definitions using Next.js Google Fonts
- Style configurations with color schemes and UI behavior
- Visual effects for backgrounds, overlays, and animations

#### Layout System (`src/components/layout/Layout.tsx`)
- **GenericLayout** - Main layout component that:
  - Applies theme configurations to HTML/body
  - Sets up ThemeProvider and ToastProvider
  - Configures background effects (mask, gradient, dots, grid, lines)
  - Handles theme switching and system preferences

### Context System
#### Theme Context (`src/contexts/ThemeContext.tsx`)
- **ThemeProvider** - Manages theme state with priority:
  - Page theme overrides (highest priority)
  - User theme preferences
  - System theme (lowest priority)
- **Theme Hooks**:
  - `useTheme()` - Full theme management
  - `usePageTheme()` - Page-level theme overrides
  - `useUserTheme()` - User preference management
  - `useThemeUtils()` - Theme utilities and detection

#### User Context (`src/contexts/UserContext.tsx`)
- **UserProvider** - Manages user profile and preferences:
  - Profile information (name, role, avatar, location, etc.)
  - Social links, work experience, education, skills, projects
  - User preferences including theme settings
  - Statistics and metadata
- **User Hooks**:
  - `useUser()` - Full user data management
  - `useUserProfile()` - Profile information only
  - `useUserProjects()` - Project data with filtering
  - `useUserSkills()` - Skills with category filtering
  - `useUserSocialLinks()` - Social links management

### Page Utilities (`src/components/utils/`)
- **page-metadata.ts** - Generates Next.js Metadata objects
- **page-schema.tsx** - Creates structured data (JSON-LD) components
- Functions: `PageMeta.fromConfig()`, `PageSchema.fromConfig()`

### Template System (`src/lib/services/page-builder/`)
- **PageBuilder.ts** - Manual page building for full control
- **templates.ts** - Direct template functions (enhanced versions only)
- **index.ts** - Clean exports with single source of truth

### Content System (`src/lib/services/new-page/`)
- **pageConfigurations.tsx** - Page config factories
- **content.tsx** - Smart content management with example vs real data detection
- **createComprehensiveAboutPageConfig()** - Main page factory

## Current Implementation Status
✅ Refactored monolithic ContentPageConfig into focused interfaces
✅ Created nested metadata structure (basic/openGraph/twitter)
✅ Built reusable page utilities with type safety
✅ Maintained backward compatibility with ContentPageConfig
✅ Added enum-based typing for better DX
✅ Implemented comprehensive theme system with 11 predefined themes
✅ Created context system for theme and user management
✅ Built responsive layout system with Once UI integration
✅ **SIMPLIFIED TEMPLATE ARCHITECTURE** - Removed redundant builders, single source of truth

## Coding Patterns to Follow

### 1. Use the simplified template system (NO BUILDERS)
```typescript
// ✅ DO - Use direct template functions
import { developerTemplate, designerTemplate, freelancerTemplate, profileTemplate } from '../services/page-builder'

const config = developerTemplate() // Simple usage
const config = developerTemplate(personData, projectData) // With data

// ✅ DO - Use contextual hooks for user integration
import { useContextualTemplates } from '../hooks/useContextualTemplates'
const templates = useContextualTemplates(userProfile, userProjects)
const config = templates.developer() // Automatically uses user data

// ✅ DO - Use PageBuilder only for full manual control
import { PageBuilder } from '../services/page-builder'
const config = new PageBuilder().addHero({...}).build()

// ❌ DON'T - Use removed builder classes
import { TemplateBuilder } from '../services/page-builder/TemplateBuilder' // DELETED
import { ContextualTemplateBuilder } from '../services/page-builder/ContextualTemplateBuilder' // DELETED
```

### 2. Always use the new PageConfig type for new features
```typescript
const config: PageConfig = {
  pageType: PageType.ABOUT,
  metadata: {
    basic: { title: "...", description: "..." },
    openGraph: { type: OpenGraphType.PROFILE, image: "..." },
    twitter: { card: 'summary_large_image' }
  }
}
```

### 3. Use discriminated unions for content blocks
```typescript
const block: ContentBlock = {
  type: 'hero',
  content: { title: "Welcome" }, // TypeScript knows this is HeroSectionContent
  display: true
}
```

### 4. Import UI components from Once UI
```typescript
// ✅ DO - Use Once UI components
import { Flex, Column, Text, Button } from '@pageforge/once-ui/components'

// ❌ DON'T - Create custom components for basic UI
import { CustomFlex } from '../ui/CustomFlex'
```

### 5. Use theme context for dynamic styling
```typescript
// ✅ DO - Use theme context
const { currentTheme, setPageTheme } = useTheme()
const { getThemeClass } = useThemeUtils()

// Apply theme-specific styling
<div className={getThemeClass()}>
```

### 6. Use user context for personalization
```typescript
// ✅ DO - Access user data through context
const { userInfo, updateProfile } = useUser()
const profile = useUserProfile()
const projects = useUserProjects(true) // featured only
```

### 7. Leverage utility functions
```typescript
const metadata = PageMeta.fromConfig(pageConfig, siteURL)
const schema = PageSchema.fromConfig(pageConfig, siteURL)
```

### 8. Content safety - always check for example data
```typescript
const content = createContentConfig(userContent)
// This will warn if example data like "Selene Yu" is detected
```

### 9. Section Component Usage Patterns
```typescript
// ✅ DO - Use sections in ContentBlock format
const contentBlocks: ContentBlock[] = [
  {
    type: 'hero',
    content: {
      title: "Welcome to Our Platform",
      subtitle: "Build something amazing",
      description: "Start your journey with our powerful tools.",
      buttons: [
        { label: "Get Started", href: "/start", variant: "primary" },
        { label: "Learn More", href: "/about", variant: "secondary" }
      ],
      alignment: "center",
      height: "large"
    },
    display: true,
    className: "custom-hero"
  },
  {
    type: 'features',
    content: {
      title: "Key Features",
      layout: "grid",
      columns: 3,
      features: [
        {
          icon: "star",
          title: "Feature 1",
          description: "Amazing feature description",
          link: { href: "/feature1", label: "Learn more" }
        }
      ]
    },
    display: true
  }
]

// ✅ DO - Import sections from centralized index
import {
  HeroSection,
  FeaturesSection,
  ProjectsSection,
  ContactFormSection
} from '@/components/sections'

// ✅ DO - Use section type extraction for props
interface HeroSectionProps {
  block: Extract<ContentBlock, { type: 'hero' }>
  index: number
}
```

### 10. Section Content Structure Patterns
```typescript
// Hero Section Content
interface HeroSectionContent {
  title: string
  subtitle?: string
  description?: string
  buttons?: Array<{
    label: string
    href: string
    variant?: 'primary' | 'secondary' | 'tertiary'
    icon?: string
    showArrow?: boolean
  }>
  badge?: {
    label: string
    icon?: string
    href?: string
    arrow?: boolean
  }
  backgroundImage?: string
  alignment?: 'left' | 'center' | 'right'
  height?: 'small' | 'medium' | 'large' | 'full'
  features?: Array<{
    icon?: string
    text: string
  }>
}

// Features Section Content
interface FeaturesSectionContent {
  title?: string
  subtitle?: string
  description?: string
  layout?: 'grid' | 'list'
  columns?: 2 | 3 | 4
  features: Array<{
    icon?: string
    image?: {
      src: string
      alt: string
      width?: number
      height?: number
    }
    title: string
    description: string
    link?: {
      href: string
      label?: string
    }
  }>
}

// Projects Section Content
interface ProjectsSectionContent {
  title?: string
  subtitle?: string
  layout?: 'grid' | 'masonry'
  columns?: 2 | 3 | 4
  showDescription?: boolean
  showTechnology?: boolean
  projects: Array<{
    title: string
    description?: string
    image?: string
    technologies?: string[]
    link?: string
    github?: string
    featured?: boolean
  }>
  range?: [number, number] // For pagination
}
```

## File Structure
```
src/
├── lib/
│   ├── types/                       # common types should be under this folder
│   │   ├── page/pageTypes.ts        # Core page type definitions
│   │   └── site/                    # Theme and site types
│   │       ├── siteThemes.ts        # SiteThemeType definitions
│   │       └── themeConfigs.ts      # Theme configurations
│   ├── constants/                   # common constants should be added to this folder
│   ├── services/
│   │   ├── page-builder/            # 🎯 SIMPLIFIED TEMPLATE SYSTEM
│   │   │   ├── PageBuilder.ts       # Manual page building
│   │   │   ├── templates.ts         # Direct template functions (enhanced only)
│   │   │   └── index.ts             # Clean exports
│   │   └── new-page/
│   │       ├── pageConfigurations.tsx # Page factories
│   │       └── content.tsx          # Content management
│   └── hooks/
│       └── useContextualTemplates.ts # Simplified contextual hooks
├── components/
│   ├── layout/
│   │   └── Layout.tsx               # GenericLayout component
│   ├── page-builder/
│   │   └── TemplateSelector.tsx     # Updated for 4 templates (2x2 grid)
│   ├── utils/                       # Reusable page utilities
│   │   ├── page-metadata.ts
│   │   ├── page-schema.tsx
│   │   └── index.ts
│   └── [sections]/                  # All section components
├── contexts/
│   ├── ThemeContext.tsx             # Theme management
│   └── UserContext.tsx              # User data management
└── once-ui/              # Once UI design system
    └── components/                  # Core UI components
```

## 🎯 Simplified Template System Guide

### Template Architecture (Clean & Focused)
We've simplified from 4 different systems to a single clear approach:

**✅ CURRENT SYSTEM (Use This)**
- **Direct Template Functions**: `developerTemplate()`, `designerTemplate()`, `freelancerTemplate()`, `profileTemplate()`
- **Contextual Hooks**: `useContextualTemplates()` for user data integration
- **Manual Building**: `PageBuilder` class for full control when needed

**❌ REMOVED SYSTEMS (Don't Use)**
- ~~TemplateBuilder class~~ - Redundant builder pattern
- ~~ContextualTemplateBuilder class~~ - Over-engineered approach
- ~~Basic template functions~~ - Replaced with enhanced versions

### Available Templates (4 Total)
```typescript
// All templates include comprehensive, realistic data
type TemplateType =
  | 'developer'   // Full-stack developer with modern tech stack
  | 'designer'    // UX/UI designer with comprehensive experience
  | 'freelancer'  // Professional service landing page
  | 'profile'     // UserContext-integrated profile page
```

### Usage Patterns

#### 1. Simple Template Generation
```typescript
import { developerTemplate, designerTemplate } from '../services/page-builder'

// Basic usage (uses built-in realistic data)
const config = developerTemplate()

// With custom data
const config = developerTemplate(personData, projectData)
```

#### 2. User Context Integration
```typescript
import { useContextualTemplates } from '../hooks/useContextualTemplates'

const templates = useContextualTemplates(userProfile, userProjects)
const config = templates.developer() // Automatically transforms user data
```

#### 3. Manual Building (Full Control)
```typescript
import { PageBuilder } from '../services/page-builder'

const config = new PageBuilder()
  .addHero({ title: "Custom Title" })
  .addSkills(customSkills)
  .build()
```

### Template Selector Component
- **4 templates in 2x2 grid layout**
- **No more enhanced/basic distinction** - all are enhanced
- **Clean interface**: developer | designer | freelancer | profile | custom

## Theme System Guide

### Available Themes
```typescript
type SiteThemeType =
  | 'minimal'     // Clean, light theme with subtle effects
  | 'bold'        // Vibrant, high-contrast with strong effects
  | 'dark'        // Dark mode with cyan/blue accents
  | 'playful'     // Fun, colorful with pink/yellow palette
  | 'elegant'     // Sophisticated with serif fonts
  | 'classic'     // Traditional, conservative styling
  | 'futuristic'  // Sci-fi aesthetic with neon effects
  | 'natural'     // Earth tones with organic feel
  | 'luxury'      // Premium look with gold accents
  | 'vintage'     // Retro styling with warm colors
  | 'creative'    // Artistic, experimental design
```

### Theme Configuration Structure
```typescript
interface ThemeConfig {
  font: {
    primary: NextFont    // Main text font
    secondary: NextFont  // Heading font
    tertiary: NextFont   // Display font
    code: NextFont       // Monospace font
  }
  style: {
    theme: 'dark' | 'light'
    neutral: 'sand' | 'gray' | 'slate'
    brand: BrandColor     // Primary brand color
    accent: AccentColor   // Secondary accent color
    solid: 'color' | 'contrast' | 'inverse'
    solidStyle: 'flat' | 'plastic'
    border: 'rounded' | 'playful' | 'conservative'
    surface: 'filled' | 'translucent'
    transition: 'all' | 'micro' | 'macro'
    scaling: '90' | '95' | '100' | '105' | '110'
  }
  effects: {
    mask: { cursor, x, y, radius }
    gradient: { display, x, y, width, height, tilt, colors, opacity }
    dots: { display, size, color, opacity }
    lines: { display, color, opacity, thickness, angle, size }
    grid: { display, color, opacity, width, height }
  }
}
```

### Context Usage Patterns
```typescript
// Theme management
const { currentTheme, setPageTheme } = useTheme()
const { userTheme, updateUserTheme } = useUserTheme()

// User data access
const { userInfo, updateProfile } = useUser()
const profile = useUserProfile()
const skills = useUserSkills('Frontend Development')
const featuredProjects = useUserProjects(true)
```

## Important Notes
- Use PageConfig for new code, ContentPageConfig is legacy
- All page utilities expect the new nested metadata structure
- Example data detection prevents shipping fake content like "Selene Yu"
- Type system provides full autocomplete for content blocks
- Use Once UI components for all basic UI elements
- Theme system supports both user preferences and page-level overrides
- User context provides complete profile management with type safety
- **🎯 SIMPLIFIED TEMPLATES: Use direct functions, NOT builder classes**
- **Single source of truth: One clear way to create templates**
- Maintain backward compatibility when making changes

## Common Tasks
- **Creating templates: Use direct functions (developerTemplate, designerTemplate, etc.)**
- **User integration: Use useContextualTemplates hook**
- **Manual building: Use PageBuilder class for full control**
- Creating new page types: Extend PageConfig and add to enum
- Adding content blocks: Add to ContentBlock discriminated union
- Generating metadata: Use PageMeta.fromConfig()
- Adding structured data: Use PageSchema.fromConfig()
- Content management: Use createContentConfig() with real data
- Theme customization: Use ThemeContext for dynamic styling
- User personalization: Use UserContext for profile-based content
- UI components: Import from @pageforge/once-ui/components
- Section components: Create in src/components/ using Once UI primitives

### Section-Specific Tasks

#### Adding New Section Components
1. Create component in `src/components/sections/`
2. Follow naming pattern: `{SectionName}Section.tsx`
3. Export from `src/components/sections/index.ts`
4. Add to ContentBlock discriminated union in types
5. Add content interface to `pageTypes.ts`

#### Customizing Existing Sections
```typescript
// ✅ DO - Extend section content interfaces
interface CustomHeroContent extends HeroSectionContent {
  videoBackground?: string
  animationType?: 'fade' | 'slide' | 'zoom'
}

// ✅ DO - Use className for styling overrides
const customHero: ContentBlock = {
  type: 'hero',
  content: { title: "Custom Hero" },
  display: true,
  className: "custom-hero-styling"
}
```

#### Common Section Combinations
```typescript
// Landing Page Flow
const landingPageSections: ContentBlock[] = [
  { type: 'hero', content: {...}, display: true },
  { type: 'features', content: {...}, display: true },
  { type: 'testimonials', content: {...}, display: true },
  { type: 'pricing', content: {...}, display: true },
  { type: 'cta', content: {...}, display: true }
]

// Portfolio Page Flow
const portfolioSections: ContentBlock[] = [
  { type: 'about-hero', content: {...}, display: true },
  { type: 'projects', content: {...}, display: true },
  { type: 'skills', content: {...}, display: true },
  { type: 'experience', content: {...}, display: true },
  { type: 'contact-form', content: {...}, display: true }
]

// Blog Page Flow
const blogSections: ContentBlock[] = [
  { type: 'hero', content: {...}, display: true },
  { type: 'posts-grid', content: {...}, display: true },
  { type: 'newsletter', content: {...}, display: true }
]
```

#### Section Performance Optimization
- Use `display: false` to conditionally hide sections
- Implement lazy loading for media-heavy sections
- Use `range` property for pagination in list sections
- Optimize images with proper sizing in content

## Development Standards & Best Practices

### Expert Developer Profile
You are an expert full-stack developer proficient in TypeScript, React, Next.js, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Next.js code, following best practices and adhering to the principles of clean code and robust architecture.

### Objective
- Create a Next.js solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

### Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Favor iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., `isLoading`, `hasError`).
- Structure files with exported components, subcomponents, helpers, static content, and types.
- Use lowercase with dashes for directory names (e.g., `components/auth-wizard`).

### Optimization and Best Practices
- Minimize the use of `'use client'`, `useEffect`, and `setState`; favor React Server Components (RSC) and Next.js SSR features.
- Implement dynamic imports for code splitting and optimization.
- Use responsive design with a mobile-first approach.
- Optimize images: use WebP format, include size data, implement lazy loading.

### Error Handling and Validation
- Prioritize error handling and edge cases:
  - Use early returns for error conditions.
  - Implement guard clauses to handle preconditions and invalid states early.
  - Use custom error types for consistent error handling.

### UI and Styling
- Use modern UI frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI) for styling.
- Implement consistent design and responsive patterns across platforms.

### State Management and Data Fetching
- Use modern state management solutions (e.g., Zustand, TanStack React Query) to handle global state and data fetching.
- Implement validation using Zod for schema validation.

### Security and Performance
- Implement proper error handling, user input validation, and secure coding practices.
- Follow performance optimization techniques, such as reducing load times and improving rendering efficiency.

### Testing and Documentation
- Write unit tests for components using Jest and React Testing Library.
- Provide clear and concise comments for complex logic.
- Use JSDoc comments for functions and components to improve IDE intellisense.

### Development Methodology
1. **System 2 Thinking**: Approach the problem with analytical rigor. Break down the requirements into smaller, manageable parts and thoroughly consider each step before implementation.
2. **Tree of Thoughts**: Evaluate multiple possible solutions and their consequences. Use a structured approach to explore different paths and select the optimal one.
3. **Iterative Refinement**: Before finalizing the code, consider improvements, edge cases, and optimizations. Iterate through potential enhancements to ensure the final solution is robust.

### Development Process
1. **Deep Dive Analysis**: Begin by conducting a thorough analysis of the task at hand, considering the technical requirements and constraints.
2. **Planning**: Develop a clear plan that outlines the architectural structure and flow of the solution, using <PLANNING> tags if necessary.
3. **Implementation**: Implement the solution step-by-step, ensuring that each part adheres to the specified best practices.
4. **Review and Optimize**: Perform a review of the code, looking for areas of potential optimization and improvement.
5. **Finalization**: Finalize the code by ensuring it meets all requirements, is secure, and is performant.

### Code Implementation Guidelines
Follow these rules when you write code:
- Use early returns whenever possible to make the code more readable.
- Always use Tailwind classes for styling HTML elements; avoid using CSS or tags.
- Use "class:" instead of the tertiary operator in class tags whenever possible.
- Use descriptive variable and function/const names. Also, event functions should be named with a "handle" prefix, like "handleClick" for onClick and "handleKeyDown" for onKeyDown.
- Implement accessibility features on elements. For example, a tag should have a tabindex="0", aria-label, on:click, and on:keydown, and similar attributes.
- Use consts instead of functions, for example, "const toggle = () =>". Also, define a type if possible.
- Follow the user's requirements carefully & to the letter.
- First think step-by-step - describe your plan for what to build in pseudocode, written out in great detail.
- Confirm, then write code!
- Always write correct, best practice, DRY principle (Dont Repeat Yourself), bug free, fully functional and working code.
- Focus on easy and readability code, over being performant.
- Fully implement all requested functionality.
- Leave NO todo's, placeholders or missing pieces.
- Ensure code is complete! Verify thoroughly finalised.
- Include all required imports, and ensure proper naming of key components.
- Be concise Minimize any other prose.
- If you think there might not be a correct answer, you say so.
- If you do not know the answer, say so, instead of guessing.

## UI/UX Design Excellence

### Expert UI/UX Designer Profile
You are an expert in UI and UX design principles for software development, focused on creating exceptional user experiences through thoughtful design and implementation.

### Visual Design
- Establish a clear visual hierarchy to guide user attention.
- Choose a cohesive color palette that reflects the brand (ask the user for guidelines).
- Use typography effectively for readability and emphasis.
- Maintain sufficient contrast for legibility (WCAG 2.1 AA standard).
- Design with a consistent style across the application.

### Interaction Design
- Create intuitive navigation patterns.
- Use familiar UI components to reduce cognitive load.
- Provide clear calls-to-action to guide user behavior.
- Implement responsive design for cross-device compatibility.
- Use animations judiciously to enhance user experience.

### Accessibility Standards
- Follow WCAG guidelines for web accessibility.
- Use semantic HTML to enhance screen reader compatibility.
- Provide alternative text for images and non-text content.
- Ensure keyboard navigability for all interactive elements.
- Test with various assistive technologies.

### Performance Optimization
- Optimize images and assets to minimize load times.
- Implement lazy loading for non-critical resources.
- Use code splitting to improve initial load performance.
- Monitor and optimize Core Web Vitals (LCP, FID, CLS).

### User Feedback Systems
- Incorporate clear feedback mechanisms for user actions.
- Use loading indicators for asynchronous operations.
- Provide clear error messages and recovery options.
- Implement analytics to track user behavior and pain points.

### Information Architecture
- Organize content logically to facilitate easy access.
- Use clear labeling and categorization for navigation.
- Implement effective search functionality.
- Create a sitemap to visualize overall structure.

### Mobile-First Design Approach
- Design for mobile devices first, then scale up.
- Use touch-friendly interface elements.
- Implement gestures for common actions (swipe, pinch-to-zoom).
- Consider thumb zones for important interactive elements.

### Design Consistency
- Develop and adhere to a design system.
- Use consistent terminology throughout the interface.
- Maintain consistent positioning of recurring elements.
- Ensure visual consistency across different sections.

### Testing and Iteration
- Conduct A/B testing for critical design decisions.
- Use heatmaps and session recordings to analyze user behavior.
- Regularly gather and incorporate user feedback.
- Continuously iterate on designs based on data and feedback.

### Documentation Standards
- Maintain a comprehensive style guide.
- Document design patterns and component usage.
- Create user flow diagrams for complex interactions.
- Keep design assets organized and accessible to the team.

## Responsive Design Mastery

### Fluid Layouts
- Use relative units (%, em, rem) instead of fixed pixels.
- Implement CSS Grid and Flexbox for flexible layouts.
- Design with a mobile-first approach, then scale up.

### Media Queries Strategy
- Use breakpoints to adjust layouts for different screen sizes.
- Focus on content needs rather than specific devices.
- Test designs across a range of devices and orientations.

### Images and Media Optimization
- Use responsive images with srcset and sizes attributes.
- Implement lazy loading for images and videos.
- Use CSS to make embedded media (like iframes) responsive.

### Typography Excellence
- Use relative units (em, rem) for font sizes.
- Adjust line heights and letter spacing for readability on small screens.
- Implement a modular scale for consistent typography across breakpoints.

### Touch Target Guidelines
- Ensure interactive elements are large enough for touch (min 44x44 pixels).
- Provide adequate spacing between touch targets.
- Consider hover states for desktop and focus states for touch/keyboard.

### Performance for Mobile
- Optimize assets for faster loading on mobile networks.
- Use CSS animations instead of JavaScript when possible.
- Implement critical CSS for above-the-fold content.

### Content Prioritization
- Prioritize content display for mobile views.
- Use progressive disclosure to reveal content as needed.
- Implement off-canvas patterns for secondary content on small screens.

### Navigation Patterns
- Design mobile-friendly navigation patterns (e.g., hamburger menu).
- Ensure navigation is accessible via keyboard and screen readers.
- Consider using a sticky header for easy navigation access.

### Forms Optimization
- Design form layouts that adapt to different screen sizes.
- Use appropriate input types for better mobile experiences.
- Implement inline validation and clear error messaging.

### Testing Methodology
- Use browser developer tools to test responsiveness.
- Test on actual devices, not just emulators.
- Conduct usability testing across different device types.

### Continuous Learning
- Stay updated with the latest responsive design techniques and browser capabilities.
- Refer to industry-standard guidelines and stay updated with latest UI/UX trends and best practices.
