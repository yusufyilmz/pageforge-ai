name: Auto Merge Develop to Main

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      merge_type:
        description: 'Type of merge to perform'
        required: true
        default: 'safe'
        type: choice
        options:
          - safe
          - quick
      skip_checks:
        description: 'Skip CI checks before merge'
        required: false
        default: false
        type: boolean
      performance_check:
        description: 'Run performance analysis before merge'
        required: false
        default: true
        type: boolean

  # Trigger on develop push (optional - enable if you want auto-merge)
  # push:
  #   branches: [ develop ]

  # Trigger on schedule (optional - weekly auto-merge)
  # schedule:
  #   - cron: '0 10 * * 1' # Every Monday at 10 AM UTC

jobs:
  pre-merge-validation:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    outputs:
      quality-result: ${{ steps.quality.outcome }}
      security-result: ${{ steps.security.outcome }}
      performance-result: ${{ steps.performance.outcome }}

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node

      - name: 🛡️ Security Audit
        id: security
        if: ${{ !inputs.skip_checks }}
        uses: ./.github/actions/security-audit
        continue-on-error: true

      - name: 🧪 Code Quality Checks
        id: quality
        if: ${{ !inputs.skip_checks }}
        uses: ./.github/actions/code-quality
        with:
          supabase-url: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          supabase-key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
        continue-on-error: true

      - name: 📊 Performance Analysis
        id: performance
        if: ${{ inputs.performance_check && !inputs.skip_checks }}
        uses: ./.github/actions/performance-analysis
        with:
          supabase-url: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          supabase-key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          performance-budget: '750'
          lighthouse-audit: 'false'  # Skip Lighthouse for pre-merge
          upload-artifacts: 'false'
        continue-on-error: true

      - name: 🚦 Quality Gate Check
        run: |
          echo "🚦 Evaluating quality gates..."

          QUALITY="${{ steps.quality.outcome }}"
          SECURITY="${{ steps.security.outcome }}"
          PERFORMANCE="${{ steps.performance.outcome }}"

          echo "Quality: $QUALITY"
          echo "Security: $SECURITY"
          echo "Performance: $PERFORMANCE"

          FAILED_COUNT=0
          [ "$QUALITY" = "failure" ] && ((FAILED_COUNT++))
          [ "$SECURITY" = "failure" ] && ((FAILED_COUNT++))
          [ "$PERFORMANCE" = "failure" ] && ((FAILED_COUNT++))

          if [ $FAILED_COUNT -gt 1 ]; then
            echo "❌ Multiple quality gates failed - blocking merge"
            echo "::error::Multiple critical issues detected. Please fix before merging."
            exit 1
          elif [ $FAILED_COUNT -eq 1 ]; then
            echo "⚠️ One quality gate failed - proceeding with warning"
            echo "::warning::One quality check failed. Review before production deployment."
          else
            echo "✅ All quality gates passed"
          fi

  auto-merge:
    needs: pre-merge-validation
    runs-on: ubuntu-latest
    if: always() && (needs.pre-merge-validation.result == 'success' || needs.pre-merge-validation.result == 'failure')

    steps:
      - name: 🛒 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🔄 Safe merge to main
        if: ${{ inputs.merge_type == 'safe' || inputs.merge_type == '' }}
        run: |
          echo "🔄 Performing safe merge..."
          git checkout main
          git pull origin main
          git checkout develop
          git pull origin develop

          # Check if there are changes to merge
          if git diff --quiet main..develop; then
            echo "⚠️ No changes to merge from develop to main"
            exit 0
          fi

          # Create merge commit with performance info
          QUALITY="${{ needs.pre-merge-validation.outputs.quality-result }}"
          SECURITY="${{ needs.pre-merge-validation.outputs.security-result }}"
          PERFORMANCE="${{ needs.pre-merge-validation.outputs.performance-result }}"

          git checkout main
          git merge develop --no-ff -m "🔄 Auto-merge develop to main via GitHub Actions

          Quality Gates:
          - Quality: $QUALITY
          - Security: $SECURITY
          - Performance: $PERFORMANCE

          Merge Type: Safe
          Timestamp: $(date)
          Actor: ${{ github.actor }}"

          # Push changes
          git push origin main

          echo "✅ Successfully merged develop to main"

      - name: ⚡ Quick merge to main
        if: ${{ inputs.merge_type == 'quick' }}
        run: |
          echo "⚡ Performing quick merge..."
          git checkout main
          git pull origin main
          git merge origin/develop --no-ff -m "⚡ Quick auto-merge develop to main

          Quality Gates: ${{ inputs.skip_checks && 'Skipped' || 'Validated' }}
          Timestamp: $(date)
          Actor: ${{ github.actor }}"
          git push origin main
          echo "✅ Quick merge completed"

      - name: 🏷️ Create performance-based release tag
        if: success() && needs.pre-merge-validation.outputs.quality-result == 'success'
        run: |
          QUALITY="${{ needs.pre-merge-validation.outputs.quality-result }}"
          PERFORMANCE="${{ needs.pre-merge-validation.outputs.performance-result }}"

          if [ "$QUALITY" = "success" ] && [ "$PERFORMANCE" = "success" ]; then
            VERSION=$(date +"%Y.%m.%d-%H%M")
            git tag -a "v$VERSION" -m "🚀 Auto-release v$VERSION

            Quality Gates Passed:
            - Code Quality: ✅
            - Security: ✅
            - Performance: ✅

            Ready for production deployment"
            git push origin "v$VERSION"
            echo "🏷️ Created release tag: v$VERSION"
          else
            echo "🏷️ Skipping release tag - quality gates not fully passed"
          fi

      - name: 📊 Generate Merge Report
        if: always()
        uses: ./.github/actions/notify-results
        with:
          workflow-name: 'Auto Merge (develop → main)'
          quality-result: ${{ needs.pre-merge-validation.outputs.quality-result }}
          security-result: ${{ needs.pre-merge-validation.outputs.security-result }}
          performance-result: ${{ needs.pre-merge-validation.outputs.performance-result }}
          supabase-result: 'success'

      - name: 📝 Create Enhanced Summary
        if: always()
        run: |
          echo "## 🔄 Enhanced Merge Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Merge Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: develop → main" >> $GITHUB_STEP_SUMMARY
          echo "- **Type**: ${{ inputs.merge_type || 'safe' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚦 Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.pre-merge-validation.outputs.quality-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: ${{ needs.pre-merge-validation.outputs.security-result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: ${{ needs.pre-merge-validation.outputs.performance-result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Recommendations" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pre-merge-validation.outputs.quality-result }}" = "success" ] && [ "${{ needs.pre-merge-validation.outputs.security-result }}" = "success" ]; then
            echo "✅ **Ready for production deployment**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Review issues before production deployment**" >> $GITHUB_STEP_SUMMARY
          fi

  notify-slack:
    needs: [pre-merge-validation, auto-merge]
    runs-on: ubuntu-latest
    if: always() && false # Set to true to enable Slack notifications
    steps:
      - name: 📢 Enhanced Slack Notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ needs.auto-merge.result }}
          text: |
            🔄 Auto-merge completed: develop → main

            📊 Results:
            • Merge Status: ${{ needs.auto-merge.result }}
            • Quality: ${{ needs.pre-merge-validation.outputs.quality-result }}
            • Security: ${{ needs.pre-merge-validation.outputs.security-result }}
            • Performance: ${{ needs.pre-merge-validation.outputs.performance-result }}

            🎯 Ready for production: ${{ (needs.pre-merge-validation.outputs.quality-result == 'success' && needs.pre-merge-validation.outputs.security-result == 'success') && '✅' || '⚠️' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
