name: Deploy Production

on:
  push:
    branches: [main]
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js Environment
        uses: ./.github/actions/setup-node

      - name: Run Security Audit
        uses: ./.github/actions/security-audit

      - name: Run Code Quality Checks
        uses: ./.github/actions/code-quality
        with:
          supabase-url: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          supabase-key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}

      - name: Performance Analysis & Metrics
        id: performance
        uses: ./.github/actions/performance-analysis
        with:
          supabase-url: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL || 'https://placeholder.supabase.co' }}
          supabase-key: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY || 'placeholder-key' }}
          performance-budget: '750'
          lighthouse-audit: 'true'
          upload-artifacts: 'true'

      - name: Performance Gate Check
        run: |
          echo "üö¶ Performance Gate Check..."

          BUNDLE_PASSED="${{ steps.performance.outputs.bundle-passed }}"
          PERF_SCORE="${{ steps.performance.outputs.performance-score }}"

          echo "üìä Performance Results:"
          echo "- Bundle Budget: $BUNDLE_PASSED"
          echo "- Performance Score: $PERF_SCORE"

          if [ "$BUNDLE_PASSED" = "false" ]; then
            echo "‚ùå Bundle size exceeds performance budget"
            echo "::warning::Consider optimizing bundle size before production deployment"
          fi

          if (( $(echo "$PERF_SCORE < 0.7" | bc -l 2>/dev/null || echo "0") )); then
            echo "‚ö†Ô∏è Performance score below recommended threshold"
            echo "::notice::Performance score: $PERF_SCORE (recommended: > 0.8)"
          fi

          echo "‚úÖ Performance analysis completed"

      - name: Deploy to Vercel
        id: deploy
        uses: amondnet/vercel-action@v25
        if: success()
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      - name: Post-Deployment Performance Monitoring
        id: monitoring
        if: success() && steps.deploy.outputs.preview-url
        uses: ./.github/actions/performance-monitoring
        with:
          deployment-url: ${{ steps.deploy.outputs.preview-url }}
          performance-threshold: '0.8'
          monitor-duration: '3'

      - name: Post-Deployment Metrics
        if: success()
        run: |
          echo "üìä Post-Deployment Summary"
          echo "## üöÄ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìà Performance Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Bundle Size**: ${{ steps.performance.outputs.build-size }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance Score**: ${{ steps.performance.outputs.performance-score }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Budget Status**: ${{ steps.performance.outputs.bundle-passed }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Live Performance Grade**: ${{ steps.monitoring.outputs.performance-grade }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at**: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Performance Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Monitoring Report](${{ steps.monitoring.outputs.monitoring-report }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Performance trend tracking
          echo "### üìä Performance Trends" >> $GITHUB_STEP_SUMMARY
          echo "Track performance over time:" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ steps.performance.outputs.build-size }}" >> $GITHUB_STEP_SUMMARY
          echo "- Score: ${{ steps.performance.outputs.performance-score }}" >> $GITHUB_STEP_SUMMARY
          echo "- Grade: ${{ steps.monitoring.outputs.performance-grade }}" >> $GITHUB_STEP_SUMMARY

      - name: Create Performance Badge
        if: success()
        run: |
          echo "üéØ Creating performance badge..."

          GRADE="${{ steps.monitoring.outputs.performance-grade }}"
          SCORE="${{ steps.performance.outputs.performance-score }}"

          # Create shields.io badge URL
          if [ "$GRADE" = "A" ]; then
            COLOR="brightgreen"
          elif [ "$GRADE" = "B" ]; then
            COLOR="green"
          elif [ "$GRADE" = "C" ]; then
            COLOR="yellow"
          elif [ "$GRADE" = "D" ]; then
            COLOR="orange"
          else
            COLOR="red"
          fi

          BADGE_URL="https://img.shields.io/badge/Performance-${GRADE}-${COLOR}"

          echo "üéØ Performance Badge: ![Performance](${BADGE_URL})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Add to your README.md:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`markdown" >> $GITHUB_STEP_SUMMARY
          echo "![Performance](${BADGE_URL})" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Notify deployment success
        if: success()
        run: |
          echo "üöÄ Deployment to production successful!"
          echo "üìä Performance metrics collected and analyzed"
          echo "üéØ Performance Grade: ${{ steps.monitoring.outputs.performance-grade }}"
          echo "üìà Bundle Score: ${{ steps.performance.outputs.performance-score }}"
          echo "Deployed at: $(date)"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to production failed!"
          echo "Check performance metrics and quality gates"
          echo "Failed at: $(date)"
          exit 1
