---
description:
globs:
alwaysApply: false
---
# Cursor AI Context for PageForge

## Quick Reference for AI Assistance

### Current Project State
- **Language**: TypeScript + React + Next.js
- **Main Focus**: Type-safe page configuration system
- **Recent Work**: Refactored monolithic types into modular interfaces

### Key Types to Know
```typescript
// NEW (use this)
PageConfig<T> - Main interface with nested metadata
PageMetadataConfig - { basic, openGraph, twitter }
ContentBlock - Discriminated union for content

// LEGACY (for compatibility only)
ContentPageConfig<T> - Old flat structure
```

### Code Patterns

#### ✅ DO - Use new type system
```typescript
const config: PageConfig = {
  pageType: PageType.ABOUT,
  metadata: {
    basic: { title: "About", description: "..." },
    openGraph: { type: OpenGraphType.PROFILE, image: "..." },
    twitter: { card: 'summary_large_image' }
  }
}
```

#### ❌ DON'T - Use legacy flat structure in new code
```typescript
// Don't do this in new code
const config: ContentPageConfig = {
  metadata: {
    title: "About",
    openGraph: { ... },
    twitter: { ... }
  }
}
```

### Import Patterns
```typescript
// Page utilities
import { PageMeta, PageSchema } from '@/components/utils'

// Types
import { PageConfig, PageType, ContentBlock } from '@/lib/types/page/pageTypes'

// Content system
import { createContentConfig, createComprehensiveAboutPageConfig } from '@/lib/services/new-page'
```

### Common AI Tasks
1. **Creating page configs** - Use PageConfig<T> with nested metadata
2. **Adding content blocks** - Use discriminated ContentBlock union
3. **Generating utilities** - Reference page-metadata.ts and page-schema.tsx patterns
4. **Type safety** - Leverage discriminated unions and utility types

### File Locations
- Types: `src/lib/types/page/pageTypes.ts`
- Utilities: `src/components/utils/`
- Page factories: `src/lib/services/new-page/pageConfigurations.tsx`
- Content management: `src/lib/services/new-page/content.tsx`
